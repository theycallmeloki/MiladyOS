jenkins:
  globalNodeProperties:
    - envVars:
        env:
          - key: "SLACK_API_KEY"
            value: "${SLACK_API_KEY}"
          - key: "GITHUB_TOKEN"
            value: "${GITHUB_TOKEN}"
          - key: "CONTAINER_REGISTRY"
            value: "${CONTAINER_REGISTRY}"
          - key: "DOCKERHUB_USERNAME"
            value: "${DOCKERHUB_USERNAME}"
          - key: "DOCKERHUB_PASSWORD"
            value: "${DOCKERHUB_PASSWORD}"
          - key: "PUSHBULLET_API_KEY"
            value: "${PUSHBULLET_API_KEY}"
  systemMessage: "Milady can stay irrational longer than Jenkins can stay solvent\n\n"
  numExecutors: 5
  scmCheckoutRetryCount: 2
  mode: NORMAL
  securityRealm:
    local:
      allowsSignup: false
      users:
      - id: ${JENKINS_ADMIN_ID}
        password: ${JENKINS_ADMIN_PASSWORD}
  authorizationStrategy:
    globalMatrix:
      permissions:
      - "Overall/Administer:admin"
      - "Overall/Read:authenticated"
  remotingSecurity:
    enabled: true
security:
  queueItemAuthenticator:
    authenticators:
    - global:
        strategy: triggeringUsersAuthorizationStrategy
groovy:
  - script: >
      import hudson.model.User;
      import jenkins.security.ApiTokenProperty;
      import groovy.json.JsonOutput;
      import java.io.OutputStreamWriter;

      //String command = "/bin/sh -c 'caddy run --config /etc/caddy/Caddyfile &'"
      //def proc = command.execute()
      //proc.waitFor()
      //println "Output: ${proc.in.text}"
      //println "Error: ${proc.err.text}"

      def token = System.getenv("API_TOKEN");

      // Get the user and ApiTokenProperty;
      def user = User.get('admin');
      def apiTokenProperty = user.getProperty(ApiTokenProperty.class);

      // Generate new fixed token
      def result = apiTokenProperty.tokenStore.addFixedNewToken("admin-token", token);

      // Log the token (this is sensitive information, be careful);
      println("Token: " + result.plainValue);

      // def pushbulletAccessToken = "Push Bullet token";

      // def url = new URL("https://api.pushbullet.com/v2/pushes");
      // def connection = url.openConnection();
      // connection.setRequestMethod("POST");
      // connection.setRequestProperty("Access-Token", pushbulletAccessToken);
      // connection.setRequestProperty("Content-Type", "application/json");
      // connection.setDoOutput(true);

      // The body of the push
      // def jsonBody = JsonOutput.toJson([
      //     type: 'note',
      //     title: 'Test Push',
      //     body: 'Token: ' + result.plainValue
      // ])

      // // Write the body of the push to the connection
      // def outputStreamWriter = new OutputStreamWriter(connection.getOutputStream());
      // outputStreamWriter.write(jsonBody);
      // outputStreamWriter.flush();

      // // Get the response from the server
      // def responseCode = connection.getResponseCode();
      // println("Response Code: ${responseCode}");

      // def response = connection.getContent();
      // println("Response: ${response}");

