apiVersion: v1
kind: ConfigMap
metadata:
  name: wiz-exporter-script
  namespace: monitoring
data:
  exporter.py: |
    #!/usr/bin/env python3
    import os
    import sys
    import time
    import json
    import requests
    import traceback
    import re
    from datetime import datetime
    from prometheus_client import start_http_server, Gauge, Counter, REGISTRY, PROCESS_COLLECTOR, PLATFORM_COLLECTOR, GC_COLLECTOR
    
    # Configuration from environment variables
    HASS_URL = os.environ.get('HASS_URL', 'http://localhost:8123')
    HASS_TOKEN = os.environ.get('HASS_TOKEN', '')
    EXPORTER_PORT = int(os.environ.get('EXPORTER_PORT', 9678))
    POLL_INTERVAL = int(os.environ.get('POLL_INTERVAL', 60))
    LOG_LEVEL = int(os.environ.get('LOG_LEVEL', 1))
    
    # Entity discovery configuration
    ENTITY_PATTERNS = os.environ.get('ENTITY_PATTERNS', 'wiz,socket,plug').lower().split(',')
    POWER_PATTERNS = os.environ.get('POWER_PATTERNS', 'power,energy,consumption').lower().split(',')
    SWITCH_PATTERNS = os.environ.get('SWITCH_PATTERNS', 'switch,outlet,toggle').lower().split(',')
    DEVICE_ID_PATTERN = os.environ.get('DEVICE_ID_PATTERN', '([a-f0-9]{6})')
    AUTO_DISCOVER = os.environ.get('AUTO_DISCOVER', 'true').lower() in ('true', 'yes', '1')
    DEVICE_NAME_TEMPLATE = os.environ.get('DEVICE_NAME_TEMPLATE', 'Smart Socket {id}')
    
    # -----------------------------
    # Logging setup
    # -----------------------------
    def log(level, message):
        if level <= LOG_LEVEL:
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            prefix = '[DEBUG]' if level >= 2 else '[INFO]' if level >= 1 else '[ERROR]'
            print(f"{timestamp} {prefix} {message}")
    
    # -----------------------------
    # Prometheus metrics setup
    # -----------------------------
    
    # Cleanup ALL existing metrics to start fresh
    for collector in list(REGISTRY._collector_to_names.keys()):
        try:
            REGISTRY.unregister(collector)
        except:
            pass
    
    # Dictionary to store metrics for each device
    device_metrics = {}
    
    # Device info dictionary to store power and state values
    device_info = {}
    
    # Track historical data for advanced metrics
    state_timestamps = {}  # When device states changed
    historical_power = {}  # Store power readings for averaging
    
    # System-wide metrics
    total_power = Gauge('smart_socket_total_power_watts', 'Total power consumption of all smart socket devices in watts')
    aggregated_power_total = Counter('smart_socket_aggregated_power_total_watt_hours', 'Aggregated power consumption for all smart socket devices')
    aggregated_power_kwh = Gauge('smart_socket_aggregated_power_total_kwh', 'Aggregated power consumption in kilowatt-hours')
    device_count = Gauge('smart_socket_device_count', 'Number of smart socket devices found')
    system_peak_power = Gauge('smart_socket_system_peak_power_watts', 'Peak power consumption across all devices')
    hourly_avg_power = Gauge('smart_socket_hourly_avg_power_watts', 'Average power consumption over the past hour')
    daily_avg_power = Gauge('smart_socket_daily_avg_power_watts', 'Average power consumption over the past day')
    total_on_device_count = Gauge('smart_socket_devices_on_count', 'Number of devices currently on')
    
    # Device creation metrics
    metrics_created = Counter('smart_socket_metrics_created_total', 'Number of device metrics created')
    
    # Home Assistant API headers
    headers = {
        'Authorization': f'Bearer {HASS_TOKEN}',
        'Content-Type': 'application/json',
    }
    
    # -----------------------------
    # Helper functions
    # -----------------------------
    
    def safe_metric_name(device_id):
        """Create a safe metric name from device ID"""
        # Remove any non-alphanumeric characters
        return re.sub(r'[^a-zA-Z0-9]', '', device_id.lower())
    
    def get_entities():
        """Get all entities from Home Assistant"""
        try:
            log(1, f"Connecting to Home Assistant at {HASS_URL}...")
            response = requests.get(f"{HASS_URL}/api/states", headers=headers)
            log(1, f"Response status code: {response.status_code}")
            response.raise_for_status()
            data = response.json()
            log(1, f"Retrieved {len(data)} entities from Home Assistant")
            return data
        except Exception as e:
            log(0, f"Error fetching entities: {e}")
            return []
    
    def extract_device_id(entity_id, entity_name=""):
        """Extract device ID from entity ID or entity name using regex pattern"""
        # Check in both entity_id and entity_name
        targets = [entity_id.lower(), entity_name.lower()]
        
        for target in targets:
            # Try to match the device ID pattern
            match = re.search(DEVICE_ID_PATTERN, target)
            if match:
                return match.group(1)
        
        return None
    
    def create_device_metrics(device_id, device_name):
        """Create all required metrics for a device"""
        if device_id in device_metrics:
            return  # Metrics already exist
        
        log(1, f"Creating metrics for device: {device_id} ({device_name})")
        safe_id = safe_metric_name(device_id)
        
        device_metrics[device_id] = {
            # Basic metrics
            'state': Gauge(f'smart_socket_state_{safe_id}', 
                           f'Smart Socket {device_name} state (1=on, 0=off)', 
                           ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            'power': Gauge(f'smart_socket_power_{safe_id}_watts', 
                           f'Smart Socket {device_name} power consumption in watts',
                           ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            'rssi': Gauge(f'smart_socket_rssi_{safe_id}_dbm', 
                          f'Smart Socket {device_name} WiFi signal strength in dBm',
                          ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            'power_total': Counter(f'smart_socket_power_total_{safe_id}_watt_hours', 
                                   f'Smart Socket {device_name} cumulative power consumption',
                                   ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            # New metrics
            'power_kwh': Gauge(f'smart_socket_power_total_{safe_id}_kwh', 
                               f'Smart Socket {device_name} cumulative power in kWh',
                               ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            'peak_power': Gauge(f'smart_socket_peak_power_{safe_id}_watts', 
                                f'Smart Socket {device_name} peak power consumption',
                                ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            'hourly_avg_power': Gauge(f'smart_socket_hourly_avg_power_{safe_id}_watts', 
                                      f'Smart Socket {device_name} average power over last hour',
                                      ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            'daily_avg_power': Gauge(f'smart_socket_daily_avg_power_{safe_id}_watts', 
                                     f'Smart Socket {device_name} average power over last day',
                                     ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            # Operational metrics
            'state_transitions': Counter(f'smart_socket_state_transitions_{safe_id}_total', 
                                         f'Smart Socket {device_name} number of on/off transitions',
                                         ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            'on_duration_seconds': Gauge(f'smart_socket_on_duration_{safe_id}_seconds', 
                                         f'Smart Socket {device_name} current time in ON state',
                                         ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            'off_duration_seconds': Gauge(f'smart_socket_off_duration_{safe_id}_seconds', 
                                          f'Smart Socket {device_name} current time in OFF state',
                                          ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name),
            
            'utilization_percent': Gauge(f'smart_socket_utilization_{safe_id}_percent', 
                                         f'Smart Socket {device_name} percentage of time in ON state',
                                         ['device_id', 'device_name']).labels(device_id=device_id, device_name=device_name)
        }
        
        # Initialize device info dictionary
        device_info[device_id] = {
            'power': 0, 
            'state': None, 
            'name': device_name,
            'entity_ids': {'power': None, 'switch': None}
        }
        
        # Initialize state tracking
        current_time = time.time()
        state_timestamps[device_id] = {
            'transitions': 0, 
            'last_change': current_time, 
            'on_time': 0, 
            'total_time': 1
        }
        
        # Initialize power history
        historical_power[device_id] = []
        
        # Increment metrics created counter
        metrics_created.inc()
        
        log(1, f"Successfully created metrics for device: {device_id}")
        return True
    
    def is_entity_match(entity_id, friendly_name, patterns):
        """Check if entity matches any of the given patterns"""
        if not entity_id and not friendly_name:
            return False
            
        for pattern in patterns:
            if pattern in entity_id.lower() or (friendly_name and pattern in friendly_name.lower()):
                return True
        return False
    
    def process_entities(entities):
        """Process all entities and extract the relevant ones"""
        discovered_devices = {}
        entity_devices = {}
        power_entities = []
        switch_entities = []
        all_relevant_entities = []
        
        log(1, f"Searching for smart socket entities among {len(entities)} entities...")
        
        # First pass: find and categorize all relevant entities
        for entity in entities:
            entity_id = entity['entity_id'].lower()
            attributes = entity.get('attributes', {})
            friendly_name = attributes.get('friendly_name', '').lower()
            
            # Look for any entity that matches our patterns
            if is_entity_match(entity_id, friendly_name, ENTITY_PATTERNS):
                log(2, f"Found relevant entity: {entity_id}, friendly_name: {friendly_name}")
                all_relevant_entities.append(entity)
                
                # Extract device ID
                device_id = extract_device_id(entity_id, friendly_name)
                
                if device_id:
                    entity_devices[entity_id] = device_id
                    
                    # Store device info
                    if device_id not in discovered_devices:
                        display_name = friendly_name or DEVICE_NAME_TEMPLATE.format(id=device_id)
                        discovered_devices[device_id] = {
                            'name': display_name,
                            'entity_ids': []
                        }
                    
                    # Track entity ID for this device
                    discovered_devices[device_id]['entity_ids'].append(entity_id)
                    
                    # Categorize by entity type
                    if is_entity_match(entity_id, friendly_name, POWER_PATTERNS):
                        power_entities.append(entity)
                    elif is_entity_match(entity_id, friendly_name, SWITCH_PATTERNS):
                        switch_entities.append(entity)
        
        log(1, f"Found {len(all_relevant_entities)} relevant entities")
        log(1, f"Power entities: {len(power_entities)}")
        log(1, f"Switch entities: {len(switch_entities)}")
        log(1, f"Discovered {len(discovered_devices)} unique devices")
        
        # Create metrics for each discovered device
        for device_id, device_data in discovered_devices.items():
            create_device_metrics(device_id, device_data['name'])
        
        # Process power entities
        for entity in power_entities:
            entity_id = entity['entity_id']
            device_id = entity_devices.get(entity_id)
            
            if not device_id:
                continue
            
            try:
                if entity['state'].replace('.', '', 1).isdigit():
                    power_value = float(entity['state'])
                    log(2, f"Found power value: {power_value}W for device {device_id}")
                    
                    # Store in device info
                    if device_id in device_info:
                        device_info[device_id]['power'] = power_value
                        device_info[device_id]['entity_ids']['power'] = entity_id
                    
                    # Update device metrics
                    if device_id in device_metrics:
                        device_metrics[device_id]['power'].set(power_value)
                        
                        # Update total power consumption for this device
                        watt_hours = power_value * (POLL_INTERVAL / 3600)
                        device_metrics[device_id]['power_total'].inc(watt_hours)
                        
                        # Calculate kWh - note: using _value.get() is risky in production but needed for demo
                        try:
                            current_wh = float(device_metrics[device_id]['power_total']._value.get())
                            kwh = current_wh / 1000
                            device_metrics[device_id]['power_kwh'].set(kwh)
                        except Exception as e:
                            log(0, f"Error calculating kWh for {device_id}: {e}")
                        
                        # Update peak power if current power exceeds previous peak
                        try:
                            current_peak = float(device_metrics[device_id]['peak_power']._value.get())
                            if power_value > current_peak:
                                device_metrics[device_id]['peak_power'].set(power_value)
                                log(2, f"New peak power for {device_id}: {power_value}W")
                        except Exception as e:
                            # Initialize if not set
                            device_metrics[device_id]['peak_power'].set(power_value)
                        
                        # Store historical power values for averages
                        current_time = time.time()
                        historical_power[device_id].append((current_time, power_value))
                        
                        # Keep only values from the past 24 hours for efficiency
                        day_ago = current_time - (24 * 60 * 60)
                        historical_power[device_id] = [entry for entry in historical_power[device_id] if entry[0] > day_ago]
                        
                        # Calculate and update hourly average
                        hour_ago = current_time - (60 * 60)
                        hour_readings = [entry[1] for entry in historical_power[device_id] if entry[0] > hour_ago]
                        if hour_readings:
                            hourly_avg = sum(hour_readings) / len(hour_readings)
                            device_metrics[device_id]['hourly_avg_power'].set(hourly_avg)
                        
                        # Calculate and update daily average
                        day_readings = [entry[1] for entry in historical_power[device_id]]
                        if day_readings:
                            daily_avg = sum(day_readings) / len(day_readings)
                            device_metrics[device_id]['daily_avg_power'].set(daily_avg)
            except Exception as e:
                log(0, f"Error processing power value from {entity_id}: {repr(e)}")
        
        # Process switch entities
        for entity in switch_entities:
            entity_id = entity['entity_id']
            device_id = entity_devices.get(entity_id)
            
            if not device_id:
                continue
                
            try:
                state = entity['state'].lower()
                if state in ['on', 'off']:
                    state_value = 1 if state == 'on' else 0
                    log(2, f"Found state: {state} ({state_value}) for device {device_id}")
                    
                    # Store in device info
                    if device_id in device_info:
                        # Track state change
                        previous_state = device_info[device_id]['state']
                        device_info[device_id]['entity_ids']['switch'] = entity_id
                        
                        if previous_state is not None and previous_state != state_value:
                            # Record state transition
                            current_time = time.time()
                            if device_id in state_timestamps:
                                # Calculate duration in previous state
                                duration = current_time - state_timestamps[device_id]['last_change']
                                state_timestamps[device_id]['total_time'] += duration
                                if previous_state == 1:  # If was previously ON
                                    state_timestamps[device_id]['on_time'] += duration
                                
                                # Update tracking
                                state_timestamps[device_id]['transitions'] += 1
                                state_timestamps[device_id]['last_change'] = current_time
                                
                                # Update metrics for transitions and utilization
                                if device_id in device_metrics:
                                    device_metrics[device_id]['state_transitions'].inc()
                                    
                                    # Calculate utilization as percentage of on-time
                                    if state_timestamps[device_id]['total_time'] > 0:
                                        utilization = (state_timestamps[device_id]['on_time'] / state_timestamps[device_id]['total_time']) * 100
                                        device_metrics[device_id]['utilization_percent'].set(utilization)
                        
                        device_info[device_id]['state'] = state_value
                    
                    # Update device metrics
                    if device_id in device_metrics:
                        device_metrics[device_id]['state'].set(state_value)
                        
                        # Update state duration since last change
                        current_time = time.time()
                        if device_id in state_timestamps:
                            duration = current_time - state_timestamps[device_id]['last_change']
                            if state_value == 1:  # ON state
                                device_metrics[device_id]['on_duration_seconds'].set(duration)
                            else:  # OFF state
                                device_metrics[device_id]['off_duration_seconds'].set(duration)
            except Exception as e:
                log(0, f"Error processing state from {entity_id}: {repr(e)}")
        
        # If we have power but no state, infer state from power for each device
        for device_id, info in device_info.items():
            if info['power'] is not None and info['state'] is None:
                inferred_state = 1 if info['power'] > 0 else 0
                device_metrics[device_id]['state'].set(inferred_state)
                log(2, f"Inferred state from power for {device_id}: {inferred_state}")
            
            # Always set a default RSSI value
            device_metrics[device_id]['rssi'].set(-65)
            
            # Set utilization based on current state if not calculated yet
            if device_info[device_id]['state'] == 1:
                device_metrics[device_id]['utilization_percent'].set(100)
            elif device_info[device_id]['state'] == 0:
                device_metrics[device_id]['utilization_percent'].set(0)
        
        # Calculate system-wide metrics
        calculate_system_metrics()
        
        return len(all_relevant_entities) > 0
    
    def calculate_system_metrics():
        """Calculate and update system-wide metrics"""
        # Calculate total by summing the power readings from each device metric
        device_powers = []
        calculated_total = 0
        on_devices_count = 0
        
        # Get power values directly from device info
        for device_id, info in device_info.items():
            power_value = info.get('power', 0) or 0
            device_powers.append(power_value)
            calculated_total += power_value
            
            # Count devices in ON state
            if info.get('state') == 1:
                on_devices_count += 1
        
        log(1, f"Total power: {calculated_total}W, Active devices: {on_devices_count}/{len(device_info)}")
        
        # Set the total power metric
        total_power.set(calculated_total)
        
        # Update the aggregated counter with the total watt-hours for this interval
        watt_hours_this_interval = calculated_total * (POLL_INTERVAL / 3600)
        aggregated_power_total.inc(watt_hours_this_interval)
        
        # Set the kilowatt-hour gauge
        try:
            # Convert from Wh to kWh
            kwh_total = float(aggregated_power_total._value.get()) / 1000
            aggregated_power_kwh.set(kwh_total)
            log(2, f"Total energy consumption: {kwh_total:.3f} kWh")
        except Exception as e:
            log(0, f"Error calculating system kWh: {e}")
        
        # Update system-wide peak power if current total exceeds previous peak
        try:
            current_peak = float(system_peak_power._value.get())
            if calculated_total > current_peak:
                system_peak_power.set(calculated_total)
                log(2, f"New system peak power: {calculated_total}W")
        except:
            # Initialize if not set
            system_peak_power.set(calculated_total)
        
        # Calculate system-wide averages from all device data
        current_time = time.time()
        hour_ago = current_time - (60 * 60)
        day_ago = current_time - (24 * 60 * 60)
        
        # Collect all power readings from all devices
        all_hourly_readings = []
        all_daily_readings = []
        
        for device_id in historical_power:
            all_hourly_readings.extend([p for t, p in historical_power[device_id] if t > hour_ago])
            all_daily_readings.extend([p for t, p in historical_power[device_id]])
        
        # Calculate and set hourly average
        if all_hourly_readings:
            system_hourly_avg = sum(all_hourly_readings) / len(all_hourly_readings)
            hourly_avg_power.set(system_hourly_avg)
        
        # Calculate and set daily average
        if all_daily_readings:
            system_daily_avg = sum(all_daily_readings) / len(all_daily_readings)
            daily_avg_power.set(system_daily_avg)
        
        # Update device count metrics
        device_count.set(len(device_info))
        total_on_device_count.set(on_devices_count)
    
    # -----------------------------
    # Main execution
    # -----------------------------
    if __name__ == '__main__':
        # Print environment variables and configuration for debugging
        log(1, "\n--- Smart Socket Exporter Starting ---")
        log(1, f"Python version: {sys.version}")
        log(1, f"Configuration:")
        log(1, f"  HASS_URL: {HASS_URL}")
        log(1, f"  EXPORTER_PORT: {EXPORTER_PORT}")
        log(1, f"  POLL_INTERVAL: {POLL_INTERVAL}")
        log(1, f"  Entity patterns: {ENTITY_PATTERNS}")
        log(1, f"  Power patterns: {POWER_PATTERNS}")
        log(1, f"  Switch patterns: {SWITCH_PATTERNS}")
        log(1, f"  Auto-discovery: {AUTO_DISCOVER}")
        log(1, f"  Log level: {LOG_LEVEL}")
        
        # Start up the server to expose the metrics
        try:
            start_http_server(EXPORTER_PORT)
            log(1, f"Exporter HTTP server successfully started on port {EXPORTER_PORT}")
        except Exception as e:
            log(0, f"Error starting HTTP server: {e}")
            traceback.print_exc()
            sys.exit(1)
        
        log(1, f"Polling Home Assistant at {HASS_URL} every {POLL_INTERVAL} seconds")
        
        # Main loop
        while True:
            try:
                log(1, "\n--- Starting polling cycle ---")
                entities = get_entities()
                if entities:
                    found = process_entities(entities)
                    if not found:
                        log(1, "No smart socket devices found")
                log(1, f"--- Completed polling cycle, sleeping for {POLL_INTERVAL} seconds ---")
                time.sleep(POLL_INTERVAL)
            except Exception as e:
                log(0, f"Error in main loop: {e}")
                traceback.print_exc()
                time.sleep(POLL_INTERVAL)